[Redis]
 Remote Dictionbary Storage
 - 메모리 기반의 데이터 저장소이고 휘발성
 - 메모리에 저장하므로 빠름
 - 싱글쓰레드
 - key - value 형식으로 저장

 Spring에서 Redis 사용하는 방법
  - RedisTemplate
  - Spring-data에서 제공하는 Repository를 이용해서 작업
        -JPA 작업과 동일

 1. Redis에서 사용할 수 있는 데이터타입
    1) Strings : 1:1로 처리할 수 있는 데이터
    2) Lists
        순서가 있는 데이터 집합

    3) Json
    4) Sets
        순서와 관계없이 데이터를 관리
        중복불가능
        Redis에서는 Set에 저장된 값들을 멤버라 부른다.
        여러 개의 멤버가 모여서 집합을 구성
        메소드)
        - sadd : set에 데이터를 추가하는 작업
        [문법]
        sadd key value
        sadd key value1 value2 value3 ...

        - scard : set에 저장된 요소들의 갯수를 리턴
        [문법]
        scard key

        - smembers : 지정한 키에 저장된 모든 요소를 출력
         [문법]
         smember key

        - sismember : 해당 멤버가 지정한 키에 해당하는 set에 있는지 여부를 검사
            [문법]
            => sismember 찾고싶은 요소
            -> 해당요소가 set에 저장되어 있으면 1을 반환하고 없으면 0을 반환


        -srem : set에 있는 요소중 지정한 요소가 존재하면 그 요소를 삭제한다.
            [문법]
            => srem 지우고싶은 요소


    5) Sorted Set
        Set과 동일한 순서를 관리
        Score 라는 개념이 존재하고 소트된 데이터로 접근할 수 있다.

    6) Hashes
        - 딕셔너리나 맵과 유사한 기능
        - key하위에 subKey를 가지고 작업할 수 있다.
        - 필드와 value를 추가해서 사용할 수 있다.
        - 관계형 데이터베이스에서 테이블을 표현할 수 있다.
        - 필드로 표현(메모리가 허용하는 범위에서 제한없이 저장)
        - 로그인세션을 저장하기 위해 사용

        메소드
            - hset
                => 단일 데이터 저장
            - hmset
                => 데이터 저장( 여러 개 데이터 )
                [문법]
                hmset key field(subkey) value[field(subkey) value,  field(subkey) value,...]
            - hdel
                => 데이터 삭제
                [문법]
                hdel key 삭제할필드

            - del
                => 키에 해당하는 hash 삭제
                [문법]
                del key

            - hget
                => 필드값 읽는 용도, 없는 경우 nil 반환
                [문법]
                hget key field

            - hlen

            - hmget
                =>여러 개 필드값 읽기, 없는 경우 nil
                [문법]
                hmget key field1, field2.....

            -hgetall
             => 입력한 키에 해당하는 해쉬에 저장된 모든 필드의 값과 필드를 반환
                [문법]
                hgetall key





 2. Sorted Set(Zset)
    - 저장된 데이터를 유니크하게 관리하기 위해서 사용
    - zadd, zcard, zrange, zrangebyscore, zrem, zscore, zrank
    - 단순 Key,value의 개념은 아니고 redis의 sorted set에서는 Key, Score, Member의 개념이 존재
        * key : zset을 구분할 수 있는 값 ------> key와 value 값을 가지고 있다.
        * score : value
        * member : zset내부의 저장되는 데이터를 구분할 수 있는 키(Member는 유니크)

    - score를 이용해서 zset내부에서 원소들의 순서를 결정
     1) 메소드
        zadd
        - 요소를 sorted set에 저장하는
        - key는 하나의 zset에 부여되는 구분값
        - zset은 key value를 갖고 있는 데이터를 관리
        - key member, value가 score
        - member는 sorted set에서 요소를 구분하는 값으로 유니크 해야한다.
        - score를 판단해서 순서를 적용

        [문법]
        zadd key score member
                ------ -------
                  값      sorted set에 저장된 요소를 구분하기 위한 키값
        zcard :
        zrange
            - sorted set 내부에 저장, 정렬된 원소에서 내가 출력하고 싶은 start번호와 stop번호를 정의해서 가져오기
            - 양수음수 값을 start와 stop에 정의할 수 있다.
            - 0번 인덱스에 있는 값이 가장 작은 값이다.
        [문법]
        zrange key start stop

        zrangebyscore :
            - 특정 범위에 해당하는 member들을 조회

         [문법]
         zrangebyscore key minvalue maxvalue
         1570000원에서 200000원 사이의 값을 가지고 있는 멤버 조회


        zrem
            - 해당 키의 member를 삭제
            [문법]
            zrem key member

        zscore :
            - score set 에서 저장한 member의 값
            [문법]
            zscore key member_key

        zrank :
            - 오름차순으로 정렬된 sorted set에서 지정한 member의 순위
            [문법]
            zrank key member_key

spring boot를 이용해서 SortedSet에 저장된 모든 데이터를 조회해서 출력
-SortedSetController
-SortedSetService

    -/getzsetData
    -RedisTemplate

    1. Sorted Set을 구하기
        (Zset)
    2. 서비스에서 zset의 메소드를 보면서 전체 멤버와 값들의 정보를 조회하기




6. Lists
    - String LinkedList로 저장하는 구조
    - 각 노드들이 이전노드와 다음노드를 참조할 수 있는 주소를 가지고 있다.
    - 양 끝에 데이터를 추가하거나 삭제하는 작업을 할 수 있도록 지원
    - Queue나 Stack의 구조를 표현할 수 있다.
    - 선형구조로 사용할 수 있도록 index가 부여된다.

    1) 메소드
        lpush
            -> lists에 저장
            [문법]
            lpush key value1
            lpush key value1 value2 value3...
        lpop
            -> 가장 마지막에 저장한 데이터를 제거

        rpop
            -> 가장 먼저 저장한 데이터를 제거
        llen
            [문법]
            -> Lists의 길이를 리턴
            llen key
        ltrim
            ltrim key stratindex endindex
        lrange
            -> index범위의 데이터를 조회하기
            [문법]
            lrange key startindex endindex

7.Bitsmaps
    => bit를 셋팅해서 작업
    => 날짜별로 유저들이 로그인 유무를 검색하거나 true/ false 등으로 비교되는 단순값
    =>

    setBit offset value
           ------ -----
     offset :구분할 수 있는 값으로 0보다 큰 정수
     value : 0또는 1의 비트값 (기본이 0)

     getbit key => 특정 offset에 셋팅된 값을 반환


8.hyperloglog
    => 집합과 같이 중복된 데이터가 없어야 하는 경우 사용
    => 오차가 발생할 수 있다.
    => 100% 정확성이 필요하지 않은 근사치 작업을 하는 경우 사용
    => 저장공간을 효율적으로 다룰 수 있다.
    => 방문자수 체크

    pfadd key 값1 값2...
        => 추가

    pfcount key
        => 갯수리턴


9.Geospatial

    => 좌표 저장하고 좌표 검색하고 거리계싼 범위탐색등을 지원하는 데이터타입
    => 위도 경도를 등록할 때 경도를 먼저 앞에 추가해야 한다.

    1) 좌표추가
    geoadd key 경도


 [Redis 사용전]
 1. 기준 위도 경도를 넘기며 요청
 2. DBMS에서 전체 데이터를 조회
 3. 기준 위치에서 반경 2km안에 있는 데이터를 추출
 4. 기준 데이터를 클라이언트로 전송

 [redis 사용후]
 1. 기준 위도 경도를 넘기며 요청
 2. 지점데이터를 redis에서 조회
    1) DB데이터를 redis에 저장
        => store키를 갖는 해쉬생성
        => 해쉬의 서브키를 store레코드 기본키
        => 나머지 store의 모든 정보를 json문자열로 변환해서 저장
        => 기준을 정해놓고 기준에 맞게 작업(스프링 스케줄러)

    2) 해쉬에서 json문자열로 저장된 데이터를 꺼내서 dto로 변환

 3. redis가 장애인 경우 DB에서  조회할 수 있도록
    => 조회할 데이터가 없거나 오류가 발생하거나

 4. 기준 위치에서 반경 2km안에 있는 데이터를 추출
    => 조회된 데이터를 redisa에서 geospatial를 이용해서 처리
 5. 기준데이터를 클라이언트로 전송

[작업순서]
1. config 정의
2. redis에 데이터를 저장하고 조회할 수 있는 메소드를 정의
    service클래스

3. 컨트롤러 정의


조회
